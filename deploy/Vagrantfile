# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'fileutils'
require './inventory'
inventory_groups = Inventory.new('./vagrant_hosts')
skip_ansible = false
DOMAIN = 'test.dev'.freeze
def add_hard_drive(*params)
    hostname = params[0]
    config = params[1]
    additional_storage = params[2]
    additional_storage = 0 if additional_storage.nil?
    config.vm.provider 'virtualbox' do |v|
        if  additional_storage > 0
            disk_file_1 = File.join(VAGRANT_ROOT, "gfs_brick_1_#{hostname}.vdi")

            # VBoxManage storagectl  to list controllers
            if File.exist?(disk_file_1)
                v.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', disk_file_1]
            else

                v.customize ['createhd', '--filename', disk_file_1, '--size', additional_storage, '--variant', 'fixed']
                v.customize ['storagectl', :id, '--name', 'SATA Controller', '--add', 'sata', '--portcount', 1]
                v.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', disk_file_1]

            end
        end
    end
    config.vm.provider 'aws' do |v|

        if  additional_storage > 0
                puts "Adding HD for AWS...TBD"
        end
    end
end
Vagrant.configure(2) do |config|
    config.vm.box = "centos/7"
    #config.vm.box = "alpine/alpine64"
    config.vbguest.auto_update = false
    ### COMMON VARIABLES

    # First make sure that an .vault_password file exists, and if it doesn't
    # then create an empty file
    FileUtils.touch('.vault_password') unless File.file?('.vault_password')

    # Constant var holding the root directory where this vagrantfile is being run
    VAGRANT_ROOT = File.dirname(File.expand_path(__FILE__))
    ansible_tags = ENV['TAGS']
    ansible_verbosity = ENV['V']

    ansible_extra_vars = if ENV['EXTRA_VARS']
                             eval(ENV['EXTRA_VARS'])
                         else
                             {}
                         end
    ansible_limit = ENV['LIMIT']

    #x = inventory_groups.get_hosts_by_groups(%w[file_server admin_terminal])
    x = inventory_groups.get_hosts_by_groups(nil)


    x.each do |_hosts_key, host_val|
        host_val.each do |host|
            hostname = host[:hostname]
            ipv4 = host[:ipv4]

            group_mapping = host[:group_mapping]
            additional_storage = group_mapping['additional_storage']

            # GlusterFS File Server 1

            config.vm.define host[:hostname] do |mm_config|
                hypenated = "#{hostname}.#{DOMAIN}".tr('_', '-')
                mm_config.vm.hostname = hypenated
                mm_config.vm.network :private_network, ip: ipv4
                mm_config.ssh.forward_agent = true

                add_hard_drive(hostname, mm_config, additional_storage)

                if skip_ansible == true
                    mm_config.vm.provision 'ansible' do |ansible|

                        ansible.playbook = group_mapping['deploy_yaml']
                        ansible.inventory_path = 'vagrant_hosts'
                        ansible.tags = ansible_tags
                        ansible.verbose = ansible_verbosity
                        ansible.extra_vars = ansible_extra_vars
                        ansible.limit = ansible_limit
                    end
                end
            end

        end
    end
end
